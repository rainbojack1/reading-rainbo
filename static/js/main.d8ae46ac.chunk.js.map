{"version":3,"sources":["components/NavBar.js","utils/API.js","components/Card.js","components/Results.js","pages/Search.js","pages/Saved.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","window","location","pathname","getBooks","term","query","axios","get","params","q","Card","props","title","authors","type","alt","src","image","description","href","link","target","rel","Results","state","books","this","map","book","i","id","_id","Component","Home","author","handleInputChange","event","name","value","setState","handleFormSubmit","preventDefault","API","then","console","log","data","catch","err","res","length","placeholder","onChange","onClick","getAllBooks","App","path","component","Search","Saved","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAiCeA,MA9Bf,WACI,OACI,yBAAKC,UAAU,iDACf,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,8BAGA,6BACE,wBAAID,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,UACHD,UAAwC,YAA7BE,OAAOC,SAASC,SAAyB,kBAAoB,YAF1E,WAOF,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CACEC,GAAG,SACHD,UAAwC,WAA7BE,OAAOC,SAASC,SAAwB,kBAAoB,YAFzE,oB,6DClBC,GACXC,SAAU,SAASC,EAAMC,GACrB,OAAOC,IAAMC,IAAI,cAAgBH,EAAM,CAAEI,OAAQ,CAAEC,EAAGJ,OC8B/CK,MA9Bf,SAAcC,GACV,OACI,yBAAKb,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,cAAca,EAAMC,OAClC,wBAAId,UAAU,iCAAiCa,EAAME,UAEzD,yBAAKf,UAAU,oBACX,4BAAQgB,KAAK,SAAShB,UAAU,mBAAhC,uBAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKiB,IAAKJ,EAAMC,MAAOI,IAAKL,EAAMM,SAEtC,yBAAKnB,UAAU,kBACX,uBAAGA,UAAU,aAAaa,EAAMO,aAChC,uBAAGC,KAAMR,EAAMS,KAAMC,OAAO,SAASC,IAAI,sBAAsBxB,UAAU,aACrE,uBAAGA,UAAU,6BADjB,sBCITyB,E,2MAvBXC,MAAQ,CACJC,MAAO,EAAKd,MAAMc,O,wEAItB,OACI,oCACI,wCACSC,KAAKF,MAAMC,MAAME,KAAI,SAACC,EAAMC,GAAP,OACtB,kBAAC,EAAD,CACIC,GAAIF,EAAKG,IACTnB,MAAOgB,EAAKhB,MACZC,QAASe,EAAKf,QACdK,YAAaU,EAAKV,YAClBD,MAAOW,EAAKX,MACZG,KAAMQ,EAAKR,e,GAhBbY,aCoGPC,E,2MAjGXT,MAAQ,CACJC,MAAO,GACPb,MAAO,GACPsB,OAAQ,GACR9B,KAAM,GACNC,MAAO,I,EAGX8B,kBAAoB,SAAAC,GAAU,IAAD,IACDA,EAAMf,OAAtBgB,EADiB,EACjBA,KAAMC,EADW,EACXA,MACd,EAAKC,UAAL,mBACKF,EAAOC,GADZ,qBAEUD,GAFV,sBAGWC,GAHX,K,EAOJE,iBAAmB,SAAAJ,GACfA,EAAMK,iBACNC,EAAIvC,SAAS,EAAKqB,MAAMpB,KAAM,EAAKoB,MAAMnB,OACpCsC,MAAK,SAAAlB,GACFmB,QAAQC,IAAIpB,EAAMqB,MAClB,EAAKP,SAAS,CAACd,MAAOA,EAAMqB,UAE/BC,OAAM,SAAAC,GACHJ,QAAQC,IAAIG,O,wEAMpB,IAAIC,EAMJ,OAJGvB,KAAKF,MAAMC,MAAMyB,OAAS,IACzBD,EAAM,kBAAC,EAAD,CAASxB,MAAOC,KAAKF,MAAMC,SAIjC,6BACI,wBAAI3B,UAAU,QAAd,qBAEA,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,gDACA,8BACI,yBAAKA,UAAU,cACX,2BACAgB,KAAK,OACLqC,YAAY,QACZC,SAAU1B,KAAKS,kBACfE,KAAK,QACLC,MAAOZ,KAAKF,MAAMZ,SAGtB,yBAAKd,UAAU,cACX,4BACIgB,KAAK,SACLhB,UAAU,kBACVuD,QAAS3B,KAAKc,kBAHlB,aAUZ,yBAAK1C,UAAU,YACf,iDACI,8BACI,yBAAKA,UAAU,cACX,2BACAgB,KAAK,OACLqC,YAAY,SACZC,SAAU1B,KAAKS,kBACfE,KAAK,SACLC,MAAOZ,KAAKF,MAAMU,UAGtB,yBAAKpC,UAAU,cACX,4BACIgB,KAAK,SACLhB,UAAU,kBACVuD,QAAS3B,KAAKc,kBAHlB,cAWhB,yBAAK1C,UAAU,OACVmD,Q,GA3FFjB,aCOJC,E,iLARP,OACI,6BACI,4D,GAJGD,aC0CJC,E,2MAvCXT,MAAQ,CACJC,MAAO,I,EAOX6B,YAAc,WACVhD,IAAMC,IAAI,cACLoC,MAAK,SAAAlB,GAEF,EAAKc,SAAS,CAACd,MAAOA,EAAMqB,UAE/BC,OAAM,SAAAC,GACHJ,QAAQC,IAAIG,O,mFAVpBtB,KAAK4B,gB,+BAeL,OACI,6BACI,wBAAIxD,UAAU,QAAd,aACC4B,KAAKF,MAAMC,MAAME,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAD,CACIE,GAAIF,EAAKG,IACTnB,MAAOgB,EAAKhB,MACZC,QAASe,EAAKf,QACdK,YAAaU,EAAKV,YAClBD,MAAOW,EAAKX,MACZG,KAAMQ,EAAKR,e,GA/BhBY,aCoBJuB,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKzD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0D,KAAK,UAAUC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWxB,QCLjB2B,QACW,cAA7B5D,OAAOC,SAAS4D,UAEe,UAA7B7D,OAAOC,SAAS4D,UAEhB7D,OAAOC,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.d8ae46ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Reading Rainbo Book Search\r\n        </Link>\r\n        <div>\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/search\"\r\n                className={window.location.pathname === \"/search\" ? \"nav-link active\" : \"nav-link\"}\r\n              >\r\n                Search\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/saved\"\r\n                className={window.location.pathname === \"/saved\" ? \"nav-link active\" : \"nav-link\"}\r\n              >\r\n                Saved Books\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import axios from \"axios\";\r\n\r\nexport default {\r\n    getBooks: function(term, query) {\r\n        return axios.get(\"/api/books/\" + term, { params: { q: query } });\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card my-2\">\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <h5 className=\"card-title\">{props.title}</h5>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{props.authors}</h6>\r\n                    </div>\r\n                    <div className=\"col-md-6 buttons\">\r\n                        <button type=\"button\" className=\"btn btn-primary\">Save to Favorites</button>\r\n                    </div>                    \r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <img alt={props.title} src={props.image} />\r\n                    </div>\r\n                    <div className=\"col-md-10 pr-2\">\r\n                        <p className=\"card-text\">{props.description}</p>\r\n                        <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card-link\">\r\n                            <i className=\"fas fa-external-link-alt\"></i> Link to Book</a>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React, { Component }  from 'react';\r\nimport Card from './Card';\r\n\r\nclass Results extends Component {\r\n    state = {\r\n        books: this.props.books\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <>\r\n            <h3>Results:</h3>\r\n                    {this.state.books.map((book, i) => (\r\n                    <Card\r\n                        id={book._id}\r\n                        title={book.title}\r\n                        authors={book.authors}\r\n                        description={book.description}\r\n                        image={book.image}\r\n                        link={book.link}\r\n                    />\r\n                ))}\r\n        </>\r\n    );\r\n                    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\n// import Card from '../components/Card';\r\nimport API from '../utils/API';\r\nimport Results from '../components/Results';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        books: [],\r\n        title: \"\",\r\n        author: \"\",\r\n        term: \"\",\r\n        query: \"\"\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value,\r\n            term: name,\r\n            query: value\r\n        })\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.getBooks(this.state.term, this.state.query)\r\n            .then(books => {\r\n                console.log(books.data);\r\n                this.setState({books: books.data})\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n    };\r\n\r\n    render() {\r\n        let res;\r\n\r\n        if(this.state.books.length > 0){\r\n            res = <Results books={this.state.books}></Results>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"my-2\">Search for a Book</h1>\r\n\r\n                <div className=\"row my-5\">\r\n                    <div className=\"col-md-6\">\r\n                        <h3>Search by title:</h3>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                type=\"text\"\r\n                                placeholder=\"Title\"\r\n                                onChange={this.handleInputChange}\r\n                                name=\"title\"\r\n                                value={this.state.title}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={this.handleFormSubmit}\r\n                                    >\r\n                                    Search\r\n                                </button>\r\n                            </div>\r\n                        </form>                    \r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <h3>Search by author:</h3>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                type=\"text\"\r\n                                placeholder=\"Author\"\r\n                                onChange={this.handleInputChange}\r\n                                name=\"author\"\r\n                                value={this.state.author}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={this.handleFormSubmit}\r\n                                    >\r\n                                    Search\r\n                                </button>\r\n                            </div>\r\n                        </form> \r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {res}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>This is the saved page.</h1>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport Card from '../components/Card';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        books: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllBooks();\r\n    }\r\n\r\n    getAllBooks = () => {\r\n        axios.get(\"/api/books\")\r\n            .then(books => {\r\n                // console.log(books.data);\r\n                this.setState({books: books.data})\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    };   \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"my-2\">All Books</h1>\r\n                {this.state.books.map((book) => (\r\n                    <Card\r\n                        id={book._id}\r\n                        title={book.title}\r\n                        authors={book.authors}\r\n                        description={book.description}\r\n                        image={book.image}\r\n                        link={book.link}\r\n                    />\r\n                ))}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport Search from \"./pages/Search\";\nimport Saved from \"./pages/Saved\";\nimport Home from \"./pages/Home\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar/>\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/search\" component={Search} />\n          <Route path=\"/saved\" component={Saved} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}